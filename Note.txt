with tf.name_scope("evaluate_measures"): 
 # Accuracy 
 with tf.name_scope("accuracy"): 
 self.labels = tf.argmax(self.input_y, 1) 
 correct_predictions = tf.equal(self.predictions, self.labels) 
 self.accuracy = tf.reduce_mean(tf.cast(correct_predictions, "float"), name="accuracy") 
   p_cond = tf.equal(self.labels, 0) # get positive answer position, return a list of True and False, the p position corresponds to True 
 n_cond = tf.equal(self.labels, 1) # get negative answer position 
 p_prediction = tf.boolean_mask(self.predictions, p_cond) 
 p_label = tf.boolean_mask(self.labels, p_cond) 
 self.tp = tf.reduce_sum(tf.cast(tf.equal(p_prediction, p_label), "float"), name="tp") 
 self.fp = tf.subtract(tf.reduce_sum(tf.cast(tf.equal(self.predictions, 0), "float")), self.tp) 
 n_prediction = tf.boolean_mask(self.predictions, n_cond) 
 n_label = tf.boolean_mask(self.labels, n_cond) 
 self.tn = tf.reduce_sum(tf.cast(tf.equal(n_prediction, n_label), "int64"), name="tn") 
 self.fn = tf.subtract(tf.reduce_sum(self.predictions), self.tn) 
 # cast tp, fp, tn, fn to float64 
 self.tp = tf.cast(self.tp, tf.float64) 
 self.fp = tf.cast(self.fp, tf.float64) 
 self.tn = tf.cast(self.tn, tf.float64) 
 self.fn = tf.cast(self.fn, tf.float64) 
 # Precision 
 self.precision = tf.div(self.tp, tf.add(self.tp, self.fp), name="precision") 
 # Recall 
 self.recall = tf.div(self.tp, tf.add(self.tp, self.fn), name="recall") 
 # F1-score 
 self.product = tf.multiply(tf.cast(tf.constant(2.0), tf.float64), 
 tf.multiply(self.precision, self.recall)) 
 self.f1_score = tf.div(self.product, tf.add(self.precision, self.recall), name="f1_score") 